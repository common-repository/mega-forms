<?php

/**
 * @link       https://wpmegaforms.com
 * @since      1.0.6
 *
 */

/**
 * The admin-specific functionality of the pro plugin.
 *
 * @author     Ali Khallad <ali@wpali.com>
 */

if (!defined('ABSPATH')) {
	exit; // Exit if accessed directly
}

class Mega_Forms_Admin_Pro
{

	private $plugin_name;
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.6
	 */
	public function __construct($plugin_name, $version)
	{
		$this->plugin_name = $plugin_name;
		$this->version     = $version;
	}

	/**
	 * Register the stylesheets for the admin area.
	 *
	 * @since    1.0.6
	 */
	public function enqueue_styles($hook)
	{

		// Only load associated styles on megaforms view
		$cp = mf_api()->get_page();
		if ($cp !== false) {
			/**
			 * Enqueue the main CSS file for the admin area (Pro).
			 * This file is automatically generated. It is a minified version of the following file:
			 *
			 * - pro/common/assets/css/*.css
			 * - pro/admin/assets/css/*.css
			 *
			 * @see Gruntfile.js for more details
			 */
			wp_enqueue_style($this->plugin_name, MEGAFORMS_DIR_URL . 'assets/admin/css/pro/styles.min.css', array(), $this->version, 'all');
		}
	}

	/**
	 * Register the JavaScript for the admin area.
	 *
	 * @since    1.0.6
	 */
	public function enqueue_scripts($hook)
	{
		// Only load associated scripts on megaforms view
		$cp = mf_api()->get_page();
		if ($cp !== false) {

			/**
			 * Register and enqueue the main JS file for the admin area (Pro).
			 * This file is automatically generated. It is a minified version of the following file:
			 *
			 * - pro/common/assets/js/*.js
			 * - pro/admin/assets/js/*.js
			 *
			 * @see Gruntfile.js for more details
			 */

			wp_register_script('mega-forms-admin-pro', MEGAFORMS_DIR_URL . 'assets/admin/js/pro/scripts.min.js', array(), $this->version, false);
			wp_enqueue_script('mega-forms-admin-pro');
		}
	}
	/**
	 * Add any extra options to the plugin settings page.
	 *
	 * @since    1.0.6
	 */
	public function forms_settings_tabs($tabs)
	{

		$tabs['integrations'] = array(
			'title'    => __('Integrations', 'megaforms'),
			'children' => array(
				'recaptcha' => __('reCAPTCHA', 'megaforms'),
			),
		);

		return $tabs;
	}
	/**
	 * Add any extra options to the plugin settings page.
	 *
	 * @since    1.0.6
	 */
	public function forms_settings($options)
	{

		if (isset($options['general'])) {
			// Add option to enable AJAX in the `general` tab
			$options['general']['enable_ajax'] = array(
				'priority'     => 30,
				'type'         => 'switch',
				'label'        => __('Enable AJAX', 'megaforms'),
				'desc'         => __('Switch this on to enable form submission without page refresh.', 'megaforms'),
				'value'        => mfget_option('enable_ajax', true),
				'sanitization' => 'boolean',
			);
		}
		// Create a new tab for reCaptcha options
		$options['recaptcha'] = array(
			'recaptcha_status'     => array(
				'priority'     => 10,
				'type'         => 'switch',
				'label'        => __('Enable reCaptcha', 'megaforms'),
				'desc'         => __('Switch this on to enable Google reCaptcha.', 'megaforms'),
				'value'        => mfget_option('recaptcha_status', false),
				'sanitization' => 'boolean',
			),
			'recaptcha_type'       => array(
				'priority'     => 20,
				'type'         => 'radio',
				'label'        => __('Type', 'megaforms'),
				'desc'         => __('The type of reCaptcha to use.', 'megaforms'),
				'value'        => mfget_option('recaptcha_type', 'legacy_v2'),
				'sanitization' => 'string',
				'options'      => array(
					'legacy_v2' => 'Legacy tickbox challenge ( `I\'m not a robot` tickbox )',
					'v2'        => 'Tickbox challenge ( `I\'m not a robot` tickbox )',
					'v3'        => 'Invisible ( score based )',
				),
			),
			'recaptcha_site_key'   => array(
				'priority'              => 30,
				'type'                  => 'text',
				'label'                 => __('reCAPTCHA Key', 'megaforms'),
				'desc'                  => sprintf(__('Your reCaptcha key. Create your key from <a href="%s" target="_blank">Google Cloud reCAPTCHA</a>', 'megaforms'), 'https://console.cloud.google.com/security/recaptcha'),
				'value'                 => mfget_option('recaptcha_site_key'),
				'sanitization'          => 'string',
				'parent'                => 'recaptcha_type',
				'parent_value'          => '',
				'parent_value_operator' => 'isnotempty',
			),
			'recaptcha_secret_key' => array(
				'priority'              => 40,
				'type'                  => 'text',
				'label'                 => __('reCAPTCHA Secret Key', 'megaforms'),
				'desc'                  => sprintf(__('If you have an legacy reCaptcha key in use, add it here. Legacy reCaptcha an be found in <a href="%s" target="_blank">Google reCAPTCHA Admin</a>', 'megaforms'), 'https://www.google.com/recaptcha/admin/'),
				'value'                 => mfget_option('recaptcha_secret_key'),
				'sanitization'          => 'string',
				'parent'                => 'recaptcha_type',
				'parent_value'          => 'legacy_v2',
				'parent_value_operator' => 'is',
			),
			'recaptcha_project_id' => array(
				'priority'              => 50,
				'type'                  => 'text',
				'label'                 => __('Project ID', 'megaforms'),
				'desc'                  => sprintf(__('Your Google Cloud project ID. To create a new project, visit the <a href="%s" target="_blank">Google Cloud Project Creation</a> page.', 'megaforms'), 'https://console.cloud.google.com/projectcreate'),
				'value'                 => mfget_option('recaptcha_project_id'),
				'sanitization'          => 'string',
				'parent'                => 'recaptcha_type',
				'parent_value'          => 'legacy_v2',
				'parent_value_operator' => 'isnot',
			),
			'recaptcha_api_key'    => array(
				'priority'              => 60,
				'type'                  => 'text',
				'label'                 => __('API Key', 'megaforms'),
				'desc'                  => sprintf(__('The API key associated with the same project used to create the reCAPTCHA key. Create your key from <a href="%s" target="_blank">Google Cloud Credentials</a>', 'megaforms'), 'https://console.cloud.google.com/apis/credentials'),
				'value'                 => mfget_option('recaptcha_api_key'),
				'sanitization'          => 'string',
				'parent'                => 'recaptcha_type',
				'parent_value'          => 'legacy_v2',
				'parent_value_operator' => 'isnot',
			),
		);

		return $options;
	}
	/**
	 * Add any extra options to the single form settings area.
	 *
	 * @since    1.0.8
	 */
	public function form_settings($options, $settings)
	{

		if (isset($options['general'])) {
			$options['general']['enable_save_and_continue'] = array(
				'priority'     => 50,
				'type'         => 'switch',
				'label'        => __('Save and Continue', 'megaforms'),
				'desc'         => __('Switch this on to allow the user to save the form and continue with the submission later.', 'megaforms'),
				'value'        => mfget('enable_save_and_continue', $settings, false),
				'sanitization' => 'boolean',
			);

			$options['general']['save_and_continue_text'] = array(
				'priority'     => 60,
				'type'         => 'text',
				'label'        => __('Save and Continue Text', 'megaforms'),
				'desc'         => __('The text for save and continue button.', 'megaforms'),
				'value'        => mfget('save_and_continue_text', $settings, __('Save and Continue Later', 'megaforms')),
				'parent'       => 'enable_save_and_continue',
				'parent_value' => '1',
				'sanitization' => 'string',
			);
		}

		if (isset($options['restrictions'])) {
			// Add an option to enable/disable reCaptcha, only if the global option is set to "true"
			if (mfget_option('recaptcha_status', false)) {
				$options['restrictions']['recaptcha_enabled'] = array(
					'priority'     => 40,
					'type'         => 'switch',
					'label'        => __('Enable reCaptcha', 'megaforms'),
					'value'        => mfget('recaptcha_enabled', $settings, true), // Default to true if globally enabled
					'desc'         => __('Enable Google reCaptcha for this form.', 'megaforms'),
					'sanitization' => 'boolean',
				);
			}
		}

		return $options;
	}
	/**
	 * Handle AJAX file upload.
	 *
	 * @since    1.0.7
	 */
	public function ajax_file_handler()
	{
		$result = array(
			'success' => false,
			'message' => __('Validation failed.', 'megaforms'),
		);

		// Prepare a validator variable
		$is_session_valid = true;
		// Get the form ID
		$form_id = absint(mfpost('_mf_form_id'));

		// Pull form token from user session
		$submit_referrer  = mfget_cleaned_url(mfpost('_mf_referrer'));
		$submit_nonce     = mfpost('_mf_nonce');
		$session_token_id = get_mf_session_token_id($form_id, $submit_referrer);
		$session_nonce    = mf_session()->get($session_token_id);

		// Check if submit nonce exists
		if (empty($submit_nonce)) {
			$is_session_valid   = false;
			$result['message'] .= ' (Error Code: MF101)';
			// Error Code MF101: Submit nonce is missing
		}

		// Check if session nonce exists
		if ($is_session_valid && empty($session_nonce)) {
			$is_session_valid   = false;
			$result['message'] .= ' (Error Code: MF102)';
			// Error Code MF102: Session nonce is missing
		}

		// Compare nonces
		if ($is_session_valid && $submit_nonce !== $session_nonce) {
			$is_session_valid   = false;
			$result['message'] .= ' (Error Code: MF103)';
			// Error Code MF103: Nonce mismatch
		}

		// Validate wp nonce
		$wp_nonce        = mfpost('_mf_extra_nonce');
		$verify_wp_nonce = !empty($wp_nonce) ? wp_verify_nonce($wp_nonce, 'mf_form_' . $form_id) : false;

		if ($is_session_valid && !$verify_wp_nonce) {
			if (empty($wp_nonce)) {
				$is_session_valid   = false;
				$result['message'] .= ' (Error Code: MF104)';
				// Error Code MF104: WordPress nonce is missing
			} else {
				$is_session_valid   = false;
				$result['message'] .= ' (Error Code: MF105)';
				// Error Code MF105: WordPress nonce verification failed
			}
		}

		// If everything is good, proceed with the request
		$result_updated = false;
		if ($form_id > 0 && $is_session_valid) {

			$action = mfpost('type');
			if ('upload' === $action) {
				$field_id = absint(mfpost('_mf_field_id'));
				$file     = $_FILES['file'] ?? array();
				if ($field_id > 0 && !empty($file)) {
					$form_fields = mf_api()->get_form_meta($form_id, 'fields');
					$field       = mfget($field_id, $form_fields);
					if (!empty($field) && 'file' == $field['type']) {
						$fieldObj = MF_Fields::get('file', array('field' => $field));
						$response = $fieldObj->validate_and_upload_file($file);
						if ($response === true) {
							$result         = array(
								'success' => true,
								// Get the first result since we are uploading only a single file
								'data'    => $fieldObj->uploads[0],
							);
							$result_updated = true;
						} else {
							$result['message'] = $response;
							$result_updated    = true;
						}
					}
				}
			} elseif ('delete' === $action) {

				$hash = mfpost('hash');
				if ($hash) {
					$delete = mf_files()->delete_temp_file($form_id, $hash);
					if ($delete) {
						$result         = array(
							'success' => true,
							'message' => __('File deleted succesfully.', 'megaforms'),
						);
						$result_updated = true;
					} else {
						$result['message'] = __('File deletion failed.', 'megaforms');
						$result_updated    = true;
					}
				}
			}

			if (!$result_updated) {
				$result['message'] = __('Request failed.', 'megaforms');
			}
		}
		// Convert the response to json format and send final result.
		echo wp_json_encode($result);
		wp_die();
	}
}
