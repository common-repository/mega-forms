<?php

/**
 * @link       https://wpmegaforms.com
 * @since      1.0.8
 *
 */

/**
 * The public-facing functionality of the pro plugin.
 *
 * @author     Ali Khallad <ali@wpali.com>
 */
if (!defined('ABSPATH')) {
	exit; // Exit if accessed directly
}

class Mega_Forms_Public_Pro
{

	private $plugin_name;
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.6
	 */
	public function __construct($plugin_name, $version)
	{
		$this->plugin_name = $plugin_name;
		$this->version     = $version;
	}

	/**
	 * Register the stylesheets for the public-facing side of the site.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_styles()
	{
		/**
		 * Register and enqueue the main CSS file for the frontend area (Pro version).
		 * This file is automatically generated. It is a minified version of the following file:
		 *
		 * - pro/common/assets/css/*.css
		 * - pro/public/assets/css/*.css
		 *
		 * If the `MEGAFORMS_LOAD_COMBINED_CSS` is set to true, this is ignored to allow for loading a single combined file ( default + pro )
		 *
		 * @see Gruntfile.js for details about the concentration process.
		 * @see Mega_Forms_Public::enqueue_styles to see how the combined file is being registered and enqueued
		 */

		if (!MEGAFORMS_LOAD_COMBINED_CSS) {
			wp_register_style('mf-public-pro', MEGAFORMS_DIR_URL . 'assets/frontend/css/pro/styles.min.css', array(), $this->version, 'all');

			if (mfget_option('load_form_styling', true)) {
				wp_enqueue_style('mf-public-pro');
			}
		}
	}

	/**
	 * Register the JavaScript for the public-facing side of the site.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_scripts()
	{
		/**
		 * Register the main JS file for the frontend area (Pro version).
		 * This file is automatically generated. It is a minified version of the following file:
		 *
		 * - pro/common/assets/js/*.js
		 * - pro/public/assets/js/*.js
		 *
		 * If the `MEGAFORMS_LOAD_COMBINED_CSS` is set to true, this is ignored to allow for loading a single combined file ( default + pro )
		 *
		 * @see Gruntfile.js for details about the concentration process.
		 * @see MF_Shortcodes::the_form to see how it's being enqueued
		 * @see Mega_Forms_Public::enqueue_scripts to see how the combined file is being registered
		 */

		if (!MEGAFORMS_LOAD_COMBINED_JS) {
			wp_register_script('mf-public-pro', MEGAFORMS_DIR_URL . 'assets/frontend/js/pro/scripts.min.js', array(), $this->version, false);
		}
	}

	/**
	 * Listen to form page submissions.
	 *
	 * @since    1.0.8
	 */
	public function listen()
	{
		// Handle paged form submissions
		if (isset($_POST['mform_next']) && isset($_POST['_mf_form_id']) && isset($_POST['_mf_current_page'])) {
			mf_submission()->exec(mfpost('_mf_form_id'), $_POST, 'page', array('page' => absint(mfpost('_mf_current_page'))));
		}

		// Handle save and continue action
		if (isset($_POST['mform_save']) && isset($_POST['_mf_form_id'])) {
			mf_submission()->exec(mfpost('_mf_form_id'), $_POST, 'save');
		}

		// Handle a download request
		if (isset($_GET['mf-dl'])) {
			mf_files()->maybe_process_download();
		}
	}
	/**
	 * Handle actions that should run before displaying the form markup.
	 *
	 * @since    1.0.8
	 */
	public function pre_form_display($form)
	{
		// Continue a submission if the current request has `mf_token` & `mf_hash`
		if (isset($_GET['mf_token']) && isset($_GET['mf_hash']) && mf_submission()->is_empty()) {
			$form_id = $_GET['mf_hash'] == wp_hash($form->ID) ? $form->ID : false;
			if ($form_id) {
				mf_submission()->exec($form_id, array(), 'continue');
			}
		}
	}
}
